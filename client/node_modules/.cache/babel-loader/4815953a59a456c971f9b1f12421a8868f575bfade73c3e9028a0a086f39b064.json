{"ast":null,"code":"var _jsxFileName = \"/Users/nurbol/Documents/react-start/client/src/Pages/EditPost.jsx\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport { useSelector } from 'react-redux';\nimport { useNavigate } from 'react-router-dom';\nimport TabBar from '../Components/TabBar';\nimport PostCard from '../Components/PostCard';\nimport '../Styles/Home.css';\nimport { toast } from 'react-toastify';\nimport 'react-toastify/dist/ReactToastify.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction EditPost() {\n  _s();\n  const user = useSelector(state => state.auth.user);\n  const navigate = useNavigate();\n  const [posts, setPosts] = useState([]);\n  const [users, setUsers] = useState([]);\n  const [editedContent, setEditedContent] = useState({});\n  useEffect(() => {\n    if (!user) {\n      toast.warn('You must be logged in to edit posts');\n      navigate('/login');\n      return;\n    }\n    const fetchPosts = async () => {\n      try {\n        const postsResponse = await fetch('http://localhost:3001/posts');\n        if (!postsResponse.ok) throw new Error('Failed to fetch posts');\n        const postsData = await postsResponse.json();\n        setPosts(postsData);\n      } catch (error) {\n        console.error('Error fetching posts:', error);\n        toast.error('Failed to fetch posts');\n      }\n    };\n    const fetchUsers = async () => {\n      try {\n        const usersResponse = await fetch('http://localhost:3001/users');\n        if (!usersResponse.ok) throw new Error('Failed to fetch users');\n        const usersData = await usersResponse.json();\n        setUsers(usersData);\n      } catch (error) {\n        console.error('Error fetching users:', error);\n        toast.error('Failed to fetch users');\n      }\n    };\n    fetchPosts();\n    fetchUsers();\n  }, [user, navigate]);\n  const handleEditPost = async postId => {\n    const content = editedContent[postId];\n    if (!content) {\n      toast.warn('Please enter content to update');\n      return;\n    }\n    if (user.role === 'ban') {\n      toast.error('You are banned and cannot edit posts');\n      return;\n    }\n    const post = posts.find(p => p.id === postId);\n    if (!post) {\n      toast.error('Post not found');\n      return;\n    }\n    if (user.id !== post.userId && user.role !== 'admin') {\n      toast.error('You can only edit your own posts or as an admin');\n      return;\n    }\n    try {\n      const response = await fetch(`http://localhost:3001/posts/${postId}`, {\n        method: 'PATCH',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify({\n          content\n        })\n      });\n      if (!response.ok) throw new Error('Failed to update post');\n      const updatedPost = await response.json();\n      setPosts(prevPosts => prevPosts.map(p => p.id === updatedPost.id ? updatedPost : p));\n      setEditedContent(prev => ({\n        ...prev,\n        [postId]: ''\n      })); // Clear input\n      toast.success('Post updated successfully!');\n    } catch (error) {\n      console.error(`Error updating post with ID: ${postId}`, error);\n      toast.error('Failed to update post');\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"background-container\",\n    children: [/*#__PURE__*/_jsxDEV(TabBar, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 99,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"posts-container\",\n      children: posts.map(post => {\n        const matchedUser = users.find(user => user.id === post.userId);\n        const currentContent = editedContent[post.id] || '';\n\n        // Only show edit controls for user's own posts or if user is admin\n        if (user.id !== post.userId && user.role !== 'admin') {\n          return /*#__PURE__*/_jsxDEV(\"div\", {\n            children: /*#__PURE__*/_jsxDEV(PostCard, {\n              post: post,\n              author: matchedUser ? matchedUser.username : 'Unknown',\n              date: post.created_at\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 109,\n              columnNumber: 17\n            }, this)\n          }, post.id, false, {\n            fileName: _jsxFileName,\n            lineNumber: 108,\n            columnNumber: 15\n          }, this);\n        }\n        return /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"edit-post-container\",\n          children: [/*#__PURE__*/_jsxDEV(PostCard, {\n            post: post,\n            author: matchedUser ? matchedUser.username : 'Unknown',\n            date: post.created_at\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 120,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"edit-post-controls\",\n            children: [/*#__PURE__*/_jsxDEV(\"label\", {\n              children: [\"Edit Content:\", /*#__PURE__*/_jsxDEV(\"input\", {\n                value: currentContent,\n                onChange: e => setEditedContent({\n                  ...editedContent,\n                  [post.id]: e.target.value\n                }),\n                placeholder: \"Edit content here\",\n                className: \"edit-content-input\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 128,\n                columnNumber: 19\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 126,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n              onClick: () => handleEditPost(post.id),\n              className: \"edit-post-button\",\n              children: [/*#__PURE__*/_jsxDEV(\"i\", {\n                className: \"fas fa-edit\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 141,\n                columnNumber: 19\n              }, this), \" Save\"]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 137,\n              columnNumber: 17\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 125,\n            columnNumber: 15\n          }, this)]\n        }, post.id, true, {\n          fileName: _jsxFileName,\n          lineNumber: 119,\n          columnNumber: 13\n        }, this);\n      })\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 100,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 98,\n    columnNumber: 5\n  }, this);\n}\n_s(EditPost, \"dhbYPiexsn1VK9RA+MQIlVV40eQ=\", false, function () {\n  return [useSelector, useNavigate];\n});\n_c = EditPost;\nexport default EditPost;\nvar _c;\n$RefreshReg$(_c, \"EditPost\");","map":{"version":3,"names":["React","useState","useEffect","useSelector","useNavigate","TabBar","PostCard","toast","jsxDEV","_jsxDEV","EditPost","_s","user","state","auth","navigate","posts","setPosts","users","setUsers","editedContent","setEditedContent","warn","fetchPosts","postsResponse","fetch","ok","Error","postsData","json","error","console","fetchUsers","usersResponse","usersData","handleEditPost","postId","content","role","post","find","p","id","userId","response","method","headers","body","JSON","stringify","updatedPost","prevPosts","map","prev","success","className","children","fileName","_jsxFileName","lineNumber","columnNumber","matchedUser","currentContent","author","username","date","created_at","value","onChange","e","target","placeholder","onClick","_c","$RefreshReg$"],"sources":["/Users/nurbol/Documents/react-start/client/src/Pages/EditPost.jsx"],"sourcesContent":["import React, { useState, useEffect } from 'react';\nimport { useSelector } from 'react-redux';\nimport { useNavigate } from 'react-router-dom';\nimport TabBar from '../Components/TabBar';\nimport PostCard from '../Components/PostCard';\nimport '../Styles/Home.css';\nimport { toast } from 'react-toastify';\nimport 'react-toastify/dist/ReactToastify.css';\n\nfunction EditPost() {\n  const user = useSelector((state) => state.auth.user);\n  const navigate = useNavigate();\n  const [posts, setPosts] = useState([]);\n  const [users, setUsers] = useState([]);\n  const [editedContent, setEditedContent] = useState({});\n\n  useEffect(() => {\n    if (!user) {\n      toast.warn('You must be logged in to edit posts');\n      navigate('/login');\n      return;\n    }\n\n    const fetchPosts = async () => {\n      try {\n        const postsResponse = await fetch('http://localhost:3001/posts');\n        if (!postsResponse.ok) throw new Error('Failed to fetch posts');\n        const postsData = await postsResponse.json();\n        setPosts(postsData);\n      } catch (error) {\n        console.error('Error fetching posts:', error);\n        toast.error('Failed to fetch posts');\n      }\n    };\n\n    const fetchUsers = async () => {\n      try {\n        const usersResponse = await fetch('http://localhost:3001/users');\n        if (!usersResponse.ok) throw new Error('Failed to fetch users');\n        const usersData = await usersResponse.json();\n        setUsers(usersData);\n      } catch (error) {\n        console.error('Error fetching users:', error);\n        toast.error('Failed to fetch users');\n      }\n    };\n\n    fetchPosts();\n    fetchUsers();\n  }, [user, navigate]);\n\n  const handleEditPost = async (postId) => {\n    const content = editedContent[postId];\n    if (!content) {\n      toast.warn('Please enter content to update');\n      return;\n    }\n\n    if (user.role === 'ban') {\n      toast.error('You are banned and cannot edit posts');\n      return;\n    }\n\n    const post = posts.find((p) => p.id === postId);\n    if (!post) {\n      toast.error('Post not found');\n      return;\n    }\n\n    if (user.id !== post.userId && user.role !== 'admin') {\n      toast.error('You can only edit your own posts or as an admin');\n      return;\n    }\n\n    try {\n      const response = await fetch(`http://localhost:3001/posts/${postId}`, {\n        method: 'PATCH',\n        headers: {\n          'Content-Type': 'application/json',\n        },\n        body: JSON.stringify({ content }),\n      });\n\n      if (!response.ok) throw new Error('Failed to update post');\n      const updatedPost = await response.json();\n      setPosts((prevPosts) =>\n        prevPosts.map((p) => (p.id === updatedPost.id ? updatedPost : p))\n      );\n      setEditedContent((prev) => ({ ...prev, [postId]: '' })); // Clear input\n      toast.success('Post updated successfully!');\n    } catch (error) {\n      console.error(`Error updating post with ID: ${postId}`, error);\n      toast.error('Failed to update post');\n    }\n  };\n\n  return (\n    <div className=\"background-container\">\n      <TabBar />\n      <div className=\"posts-container\">\n        {posts.map((post) => {\n          const matchedUser = users.find((user) => user.id === post.userId);\n          const currentContent = editedContent[post.id] || '';\n\n          // Only show edit controls for user's own posts or if user is admin\n          if (user.id !== post.userId && user.role !== 'admin') {\n            return (\n              <div key={post.id}>\n                <PostCard\n                  post={post}\n                  author={matchedUser ? matchedUser.username : 'Unknown'}\n                  date={post.created_at}\n                />\n              </div>\n            );\n          }\n\n          return (\n            <div key={post.id} className=\"edit-post-container\">\n              <PostCard\n                post={post}\n                author={matchedUser ? matchedUser.username : 'Unknown'}\n                date={post.created_at}\n              />\n              <div className=\"edit-post-controls\">\n                <label>\n                  Edit Content:\n                  <input\n                    value={currentContent}\n                    onChange={(e) =>\n                      setEditedContent({ ...editedContent, [post.id]: e.target.value })\n                    }\n                    placeholder=\"Edit content here\"\n                    className=\"edit-content-input\"\n                  />\n                </label>\n                <button\n                  onClick={() => handleEditPost(post.id)}\n                  className=\"edit-post-button\"\n                >\n                  <i className=\"fas fa-edit\"></i> Save\n                </button>\n              </div>\n            </div>\n          );\n        })}\n      </div>\n    </div>\n  );\n}\n\nexport default EditPost;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}