{"ast":null,"code":"var _jsxFileName = \"/Users/nurbol/Documents/react-start/client/src/Pages/Chats.jsx\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport { useSelector } from 'react-redux';\nimport { useNavigate } from 'react-router-dom';\nimport TabBar from '../Components/TabBar';\nimport '../Styles/Chats.css';\nimport { toast } from 'react-toastify';\nimport 'react-toastify/dist/ReactToastify.css';\nimport { FaUserCircle } from 'react-icons/fa';\nimport { jsxDEV as _jsxDEV, Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nfunction Chats() {\n  _s();\n  const user = useSelector(state => state.auth.user);\n  const navigate = useNavigate();\n  const [conversations, setConversations] = useState([]);\n  const [messages, setMessages] = useState([]);\n  const [selectedConversation, setSelectedConversation] = useState(null);\n  const [newMessage, setNewMessage] = useState('');\n  useEffect(() => {\n    if (!user) {\n      navigate('/');\n      return;\n    }\n    const fetchConversations = async () => {\n      try {\n        const response = await fetch('http://localhost:3001/conversations');\n        if (!response.ok) throw new Error('Failed to fetch conversations');\n        const data = await response.json();\n        const userConversations = data.filter(conv => conv.participants.includes(user.id));\n        setConversations(userConversations);\n      } catch (error) {\n        console.error('Error fetching conversations:', error);\n        toast.error('Failed to fetch conversations');\n      }\n    };\n    fetchConversations();\n    return () => {\n      setConversations([]);\n      setMessages([]);\n    };\n  }, [user, navigate]);\n  const handleSelectConversation = conversation => {\n    setSelectedConversation(conversation);\n    fetchMessages(conversation.id);\n  };\n  const fetchMessages = async conversationId => {\n    try {\n      const response = await fetch(`http://localhost:3001/messages?conversation_id=${conversationId}`);\n      if (!response.ok) throw new Error('Failed to fetch messages');\n      const data = await response.json();\n      setMessages(data);\n    } catch (error) {\n      console.error('Error fetching messages:', error);\n      toast.error('Failed to fetch messages');\n    }\n  };\n  const handleSendMessage = async () => {\n    if (!newMessage.trim()) {\n      toast.warn('Message cannot be empty');\n      return;\n    }\n    const message = {\n      conversation_id: selectedConversation.id,\n      sender_id: user.id,\n      content: newMessage\n    };\n    try {\n      const response = await fetch('http://localhost:3001/messages', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify(message)\n      });\n      if (!response.ok) throw new Error('Failed to send message');\n      const savedMessage = await response.json();\n      setMessages(prevMessages => [...prevMessages, savedMessage]);\n      setNewMessage('');\n    } catch (error) {\n      console.error('Error sending message:', error);\n      toast.error('Failed to send message');\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"background-container\",\n    children: [/*#__PURE__*/_jsxDEV(TabBar, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 99,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"chats-container\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"conversations-list\",\n        children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n          children: \"Chats\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 102,\n          columnNumber: 11\n        }, this), conversations.length > 0 ? conversations.map(conversation => /*#__PURE__*/_jsxDEV(\"div\", {\n          className: `conversation-item ${(selectedConversation === null || selectedConversation === void 0 ? void 0 : selectedConversation.id) === conversation.id ? 'active' : ''}`,\n          onClick: () => handleSelectConversation(conversation),\n          children: /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"conversation-user\",\n            children: [/*#__PURE__*/_jsxDEV(FaUserCircle, {\n              className: \"conversation-avatar\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 113,\n              columnNumber: 19\n            }, this), conversation.participantNames.filter(name => name !== user.username).map(name => /*#__PURE__*/_jsxDEV(\"span\", {\n              children: name\n            }, name, false, {\n              fileName: _jsxFileName,\n              lineNumber: 117,\n              columnNumber: 23\n            }, this))]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 112,\n            columnNumber: 17\n          }, this)\n        }, conversation.id, false, {\n          fileName: _jsxFileName,\n          lineNumber: 105,\n          columnNumber: 15\n        }, this)) : /*#__PURE__*/_jsxDEV(\"p\", {\n          children: \"No conversations available\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 123,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 101,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"chat-window\",\n        children: selectedConversation ? /*#__PURE__*/_jsxDEV(_Fragment, {\n          children: [/*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"messages-list\",\n            children: messages.map(message => /*#__PURE__*/_jsxDEV(\"div\", {\n              className: `message-item ${message.sender_id === user.id ? 'sent' : 'received'}`,\n              children: message.content\n            }, message.id, false, {\n              fileName: _jsxFileName,\n              lineNumber: 131,\n              columnNumber: 19\n            }, this))\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 129,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"message-input\",\n            children: [/*#__PURE__*/_jsxDEV(\"input\", {\n              type: \"text\",\n              placeholder: \"Type a message...\",\n              value: newMessage,\n              onChange: e => setNewMessage(e.target.value)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 142,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n              onClick: handleSendMessage,\n              children: \"Send\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 148,\n              columnNumber: 17\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 141,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true) : /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"no-conversation-selected\",\n          children: /*#__PURE__*/_jsxDEV(\"p\", {\n            children: \"Select a conversation to start chatting\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 153,\n            columnNumber: 15\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 152,\n          columnNumber: 13\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 126,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 100,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 98,\n    columnNumber: 5\n  }, this);\n}\n_s(Chats, \"H9vD5BA/ZxGtoEkJTR0JPwaDYVs=\", false, function () {\n  return [useSelector, useNavigate];\n});\n_c = Chats;\nexport default Chats;\nvar _c;\n$RefreshReg$(_c, \"Chats\");","map":{"version":3,"names":["React","useState","useEffect","useSelector","useNavigate","TabBar","toast","FaUserCircle","jsxDEV","_jsxDEV","Fragment","_Fragment","Chats","_s","user","state","auth","navigate","conversations","setConversations","messages","setMessages","selectedConversation","setSelectedConversation","newMessage","setNewMessage","fetchConversations","response","fetch","ok","Error","data","json","userConversations","filter","conv","participants","includes","id","error","console","handleSelectConversation","conversation","fetchMessages","conversationId","handleSendMessage","trim","warn","message","conversation_id","sender_id","content","method","headers","body","JSON","stringify","savedMessage","prevMessages","className","children","fileName","_jsxFileName","lineNumber","columnNumber","length","map","onClick","participantNames","name","username","type","placeholder","value","onChange","e","target","_c","$RefreshReg$"],"sources":["/Users/nurbol/Documents/react-start/client/src/Pages/Chats.jsx"],"sourcesContent":["import React, { useState, useEffect } from 'react';\nimport { useSelector } from 'react-redux';\nimport { useNavigate } from 'react-router-dom';\nimport TabBar from '../Components/TabBar';\nimport '../Styles/Chats.css';\nimport { toast } from 'react-toastify';\nimport 'react-toastify/dist/ReactToastify.css';\nimport { FaUserCircle } from 'react-icons/fa';\n\nfunction Chats() {\n  const user = useSelector((state) => state.auth.user);\n  const navigate = useNavigate();\n  const [conversations, setConversations] = useState([]);\n  const [messages, setMessages] = useState([]);\n  const [selectedConversation, setSelectedConversation] = useState(null);\n  const [newMessage, setNewMessage] = useState('');\n\n  useEffect(() => {\n    if (!user) {\n      navigate('/');\n      return;\n    }\n\n    const fetchConversations = async () => {\n      try {\n        const response = await fetch('http://localhost:3001/conversations');\n        if (!response.ok) throw new Error('Failed to fetch conversations');\n        const data = await response.json();\n        const userConversations = data.filter((conv) =>\n          conv.participants.includes(user.id)\n        );\n        setConversations(userConversations);\n      } catch (error) {\n        console.error('Error fetching conversations:', error);\n        toast.error('Failed to fetch conversations');\n      }\n    };\n\n    fetchConversations();\n\n    return () => {\n      setConversations([]);\n      setMessages([]);\n    };\n  }, [user, navigate]);\n\n  const handleSelectConversation = (conversation) => {\n    setSelectedConversation(conversation);\n    fetchMessages(conversation.id);\n  };\n\n  const fetchMessages = async (conversationId) => {\n    try {\n      const response = await fetch(\n        `http://localhost:3001/messages?conversation_id=${conversationId}`\n      );\n      if (!response.ok) throw new Error('Failed to fetch messages');\n      const data = await response.json();\n      setMessages(data);\n    } catch (error) {\n      console.error('Error fetching messages:', error);\n      toast.error('Failed to fetch messages');\n    }\n  };\n\n  const handleSendMessage = async () => {\n    if (!newMessage.trim()) {\n      toast.warn('Message cannot be empty');\n      return;\n    }\n\n    const message = {\n      conversation_id: selectedConversation.id,\n      sender_id: user.id,\n      content: newMessage,\n    };\n\n    try {\n      const response = await fetch('http://localhost:3001/messages', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n        },\n        body: JSON.stringify(message),\n      });\n\n      if (!response.ok) throw new Error('Failed to send message');\n      const savedMessage = await response.json();\n      setMessages((prevMessages) => [...prevMessages, savedMessage]);\n      setNewMessage('');\n    } catch (error) {\n      console.error('Error sending message:', error);\n      toast.error('Failed to send message');\n    }\n  };\n\n  return (\n    <div className=\"background-container\">\n      <TabBar />\n      <div className=\"chats-container\">\n        <div className=\"conversations-list\">\n          <h2>Chats</h2>\n          {conversations.length > 0 ? (\n            conversations.map((conversation) => (\n              <div\n                key={conversation.id}\n                className={`conversation-item ${\n                  selectedConversation?.id === conversation.id ? 'active' : ''\n                }`}\n                onClick={() => handleSelectConversation(conversation)}\n              >\n                <div className=\"conversation-user\">\n                  <FaUserCircle className=\"conversation-avatar\" />\n                  {conversation.participantNames\n                    .filter((name) => name !== user.username)\n                    .map((name) => (\n                      <span key={name}>{name}</span>\n                    ))}\n                </div>\n              </div>\n            ))\n          ) : (\n            <p>No conversations available</p>\n          )}\n        </div>\n        <div className=\"chat-window\">\n          {selectedConversation ? (\n            <>\n              <div className=\"messages-list\">\n                {messages.map((message) => (\n                  <div\n                    key={message.id}\n                    className={`message-item ${\n                      message.sender_id === user.id ? 'sent' : 'received'\n                    }`}\n                  >\n                    {message.content}\n                  </div>\n                ))}\n              </div>\n              <div className=\"message-input\">\n                <input\n                  type=\"text\"\n                  placeholder=\"Type a message...\"\n                  value={newMessage}\n                  onChange={(e) => setNewMessage(e.target.value)}\n                />\n                <button onClick={handleSendMessage}>Send</button>\n              </div>\n            </>\n          ) : (\n            <div className=\"no-conversation-selected\">\n              <p>Select a conversation to start chatting</p>\n            </div>\n          )}\n        </div>\n      </div>\n    </div>\n  );\n}\n\nexport default Chats;"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,QAAQ,EAAEC,SAAS,QAAQ,OAAO;AAClD,SAASC,WAAW,QAAQ,aAAa;AACzC,SAASC,WAAW,QAAQ,kBAAkB;AAC9C,OAAOC,MAAM,MAAM,sBAAsB;AACzC,OAAO,qBAAqB;AAC5B,SAASC,KAAK,QAAQ,gBAAgB;AACtC,OAAO,uCAAuC;AAC9C,SAASC,YAAY,QAAQ,gBAAgB;AAAC,SAAAC,MAAA,IAAAC,OAAA,EAAAC,QAAA,IAAAC,SAAA;AAE9C,SAASC,KAAKA,CAAA,EAAG;EAAAC,EAAA;EACf,MAAMC,IAAI,GAAGX,WAAW,CAAEY,KAAK,IAAKA,KAAK,CAACC,IAAI,CAACF,IAAI,CAAC;EACpD,MAAMG,QAAQ,GAAGb,WAAW,CAAC,CAAC;EAC9B,MAAM,CAACc,aAAa,EAAEC,gBAAgB,CAAC,GAAGlB,QAAQ,CAAC,EAAE,CAAC;EACtD,MAAM,CAACmB,QAAQ,EAAEC,WAAW,CAAC,GAAGpB,QAAQ,CAAC,EAAE,CAAC;EAC5C,MAAM,CAACqB,oBAAoB,EAAEC,uBAAuB,CAAC,GAAGtB,QAAQ,CAAC,IAAI,CAAC;EACtE,MAAM,CAACuB,UAAU,EAAEC,aAAa,CAAC,GAAGxB,QAAQ,CAAC,EAAE,CAAC;EAEhDC,SAAS,CAAC,MAAM;IACd,IAAI,CAACY,IAAI,EAAE;MACTG,QAAQ,CAAC,GAAG,CAAC;MACb;IACF;IAEA,MAAMS,kBAAkB,GAAG,MAAAA,CAAA,KAAY;MACrC,IAAI;QACF,MAAMC,QAAQ,GAAG,MAAMC,KAAK,CAAC,qCAAqC,CAAC;QACnE,IAAI,CAACD,QAAQ,CAACE,EAAE,EAAE,MAAM,IAAIC,KAAK,CAAC,+BAA+B,CAAC;QAClE,MAAMC,IAAI,GAAG,MAAMJ,QAAQ,CAACK,IAAI,CAAC,CAAC;QAClC,MAAMC,iBAAiB,GAAGF,IAAI,CAACG,MAAM,CAAEC,IAAI,IACzCA,IAAI,CAACC,YAAY,CAACC,QAAQ,CAACvB,IAAI,CAACwB,EAAE,CACpC,CAAC;QACDnB,gBAAgB,CAACc,iBAAiB,CAAC;MACrC,CAAC,CAAC,OAAOM,KAAK,EAAE;QACdC,OAAO,CAACD,KAAK,CAAC,+BAA+B,EAAEA,KAAK,CAAC;QACrDjC,KAAK,CAACiC,KAAK,CAAC,+BAA+B,CAAC;MAC9C;IACF,CAAC;IAEDb,kBAAkB,CAAC,CAAC;IAEpB,OAAO,MAAM;MACXP,gBAAgB,CAAC,EAAE,CAAC;MACpBE,WAAW,CAAC,EAAE,CAAC;IACjB,CAAC;EACH,CAAC,EAAE,CAACP,IAAI,EAAEG,QAAQ,CAAC,CAAC;EAEpB,MAAMwB,wBAAwB,GAAIC,YAAY,IAAK;IACjDnB,uBAAuB,CAACmB,YAAY,CAAC;IACrCC,aAAa,CAACD,YAAY,CAACJ,EAAE,CAAC;EAChC,CAAC;EAED,MAAMK,aAAa,GAAG,MAAOC,cAAc,IAAK;IAC9C,IAAI;MACF,MAAMjB,QAAQ,GAAG,MAAMC,KAAK,CAC1B,kDAAkDgB,cAAc,EAClE,CAAC;MACD,IAAI,CAACjB,QAAQ,CAACE,EAAE,EAAE,MAAM,IAAIC,KAAK,CAAC,0BAA0B,CAAC;MAC7D,MAAMC,IAAI,GAAG,MAAMJ,QAAQ,CAACK,IAAI,CAAC,CAAC;MAClCX,WAAW,CAACU,IAAI,CAAC;IACnB,CAAC,CAAC,OAAOQ,KAAK,EAAE;MACdC,OAAO,CAACD,KAAK,CAAC,0BAA0B,EAAEA,KAAK,CAAC;MAChDjC,KAAK,CAACiC,KAAK,CAAC,0BAA0B,CAAC;IACzC;EACF,CAAC;EAED,MAAMM,iBAAiB,GAAG,MAAAA,CAAA,KAAY;IACpC,IAAI,CAACrB,UAAU,CAACsB,IAAI,CAAC,CAAC,EAAE;MACtBxC,KAAK,CAACyC,IAAI,CAAC,yBAAyB,CAAC;MACrC;IACF;IAEA,MAAMC,OAAO,GAAG;MACdC,eAAe,EAAE3B,oBAAoB,CAACgB,EAAE;MACxCY,SAAS,EAAEpC,IAAI,CAACwB,EAAE;MAClBa,OAAO,EAAE3B;IACX,CAAC;IAED,IAAI;MACF,MAAMG,QAAQ,GAAG,MAAMC,KAAK,CAAC,gCAAgC,EAAE;QAC7DwB,MAAM,EAAE,MAAM;QACdC,OAAO,EAAE;UACP,cAAc,EAAE;QAClB,CAAC;QACDC,IAAI,EAAEC,IAAI,CAACC,SAAS,CAACR,OAAO;MAC9B,CAAC,CAAC;MAEF,IAAI,CAACrB,QAAQ,CAACE,EAAE,EAAE,MAAM,IAAIC,KAAK,CAAC,wBAAwB,CAAC;MAC3D,MAAM2B,YAAY,GAAG,MAAM9B,QAAQ,CAACK,IAAI,CAAC,CAAC;MAC1CX,WAAW,CAAEqC,YAAY,IAAK,CAAC,GAAGA,YAAY,EAAED,YAAY,CAAC,CAAC;MAC9DhC,aAAa,CAAC,EAAE,CAAC;IACnB,CAAC,CAAC,OAAOc,KAAK,EAAE;MACdC,OAAO,CAACD,KAAK,CAAC,wBAAwB,EAAEA,KAAK,CAAC;MAC9CjC,KAAK,CAACiC,KAAK,CAAC,wBAAwB,CAAC;IACvC;EACF,CAAC;EAED,oBACE9B,OAAA;IAAKkD,SAAS,EAAC,sBAAsB;IAAAC,QAAA,gBACnCnD,OAAA,CAACJ,MAAM;MAAAwD,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAE,CAAC,eACVvD,OAAA;MAAKkD,SAAS,EAAC,iBAAiB;MAAAC,QAAA,gBAC9BnD,OAAA;QAAKkD,SAAS,EAAC,oBAAoB;QAAAC,QAAA,gBACjCnD,OAAA;UAAAmD,QAAA,EAAI;QAAK;UAAAC,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAI,CAAC,EACb9C,aAAa,CAAC+C,MAAM,GAAG,CAAC,GACvB/C,aAAa,CAACgD,GAAG,CAAExB,YAAY,iBAC7BjC,OAAA;UAEEkD,SAAS,EAAE,qBACT,CAAArC,oBAAoB,aAApBA,oBAAoB,uBAApBA,oBAAoB,CAAEgB,EAAE,MAAKI,YAAY,CAACJ,EAAE,GAAG,QAAQ,GAAG,EAAE,EAC3D;UACH6B,OAAO,EAAEA,CAAA,KAAM1B,wBAAwB,CAACC,YAAY,CAAE;UAAAkB,QAAA,eAEtDnD,OAAA;YAAKkD,SAAS,EAAC,mBAAmB;YAAAC,QAAA,gBAChCnD,OAAA,CAACF,YAAY;cAACoD,SAAS,EAAC;YAAqB;cAAAE,QAAA,EAAAC,YAAA;cAAAC,UAAA;cAAAC,YAAA;YAAA,OAAE,CAAC,EAC/CtB,YAAY,CAAC0B,gBAAgB,CAC3BlC,MAAM,CAAEmC,IAAI,IAAKA,IAAI,KAAKvD,IAAI,CAACwD,QAAQ,CAAC,CACxCJ,GAAG,CAAEG,IAAI,iBACR5D,OAAA;cAAAmD,QAAA,EAAkBS;YAAI,GAAXA,IAAI;cAAAR,QAAA,EAAAC,YAAA;cAAAC,UAAA;cAAAC,YAAA;YAAA,OAAc,CAC9B,CAAC;UAAA;YAAAH,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OACD;QAAC,GAbDtB,YAAY,CAACJ,EAAE;UAAAuB,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAcjB,CACN,CAAC,gBAEFvD,OAAA;UAAAmD,QAAA,EAAG;QAA0B;UAAAC,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAG,CACjC;MAAA;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACE,CAAC,eACNvD,OAAA;QAAKkD,SAAS,EAAC,aAAa;QAAAC,QAAA,EACzBtC,oBAAoB,gBACnBb,OAAA,CAAAE,SAAA;UAAAiD,QAAA,gBACEnD,OAAA;YAAKkD,SAAS,EAAC,eAAe;YAAAC,QAAA,EAC3BxC,QAAQ,CAAC8C,GAAG,CAAElB,OAAO,iBACpBvC,OAAA;cAEEkD,SAAS,EAAE,gBACTX,OAAO,CAACE,SAAS,KAAKpC,IAAI,CAACwB,EAAE,GAAG,MAAM,GAAG,UAAU,EAClD;cAAAsB,QAAA,EAEFZ,OAAO,CAACG;YAAO,GALXH,OAAO,CAACV,EAAE;cAAAuB,QAAA,EAAAC,YAAA;cAAAC,UAAA;cAAAC,YAAA;YAAA,OAMZ,CACN;UAAC;YAAAH,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OACC,CAAC,eACNvD,OAAA;YAAKkD,SAAS,EAAC,eAAe;YAAAC,QAAA,gBAC5BnD,OAAA;cACE8D,IAAI,EAAC,MAAM;cACXC,WAAW,EAAC,mBAAmB;cAC/BC,KAAK,EAAEjD,UAAW;cAClBkD,QAAQ,EAAGC,CAAC,IAAKlD,aAAa,CAACkD,CAAC,CAACC,MAAM,CAACH,KAAK;YAAE;cAAAZ,QAAA,EAAAC,YAAA;cAAAC,UAAA;cAAAC,YAAA;YAAA,OAChD,CAAC,eACFvD,OAAA;cAAQ0D,OAAO,EAAEtB,iBAAkB;cAAAe,QAAA,EAAC;YAAI;cAAAC,QAAA,EAAAC,YAAA;cAAAC,UAAA;cAAAC,YAAA;YAAA,OAAQ,CAAC;UAAA;YAAAH,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAC9C,CAAC;QAAA,eACN,CAAC,gBAEHvD,OAAA;UAAKkD,SAAS,EAAC,0BAA0B;UAAAC,QAAA,eACvCnD,OAAA;YAAAmD,QAAA,EAAG;UAAuC;YAAAC,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAAG;QAAC;UAAAH,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAC3C;MACN;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACE,CAAC;IAAA;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACH,CAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACH,CAAC;AAEV;AAACnD,EAAA,CAtJQD,KAAK;EAAA,QACCT,WAAW,EACPC,WAAW;AAAA;AAAAyE,EAAA,GAFrBjE,KAAK;AAwJd,eAAeA,KAAK;AAAC,IAAAiE,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}