{"ast":null,"code":"var _jsxFileName = \"/Users/nurbol/Documents/nodes.frontend/src/Components/Comments.jsx\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from \"react\";\nimport { useSelector } from \"react-redux\";\nimport Comment from \"./Comment\";\nimport \"../Styles/Comments.css\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Comments = ({\n  postId\n}) => {\n  _s();\n  const currentUser = useSelector(state => state.auth.user);\n  const [newComment, setNewComment] = useState(\"\");\n  const [comments, setComments] = useState([]);\n  const [isCommenting, setIsCommenting] = useState(false);\n  useEffect(() => {\n    const fetchComments = async () => {\n      try {\n        const response = await fetch(`http://localhost:8080/api/comments/post/${postId}`);\n        if (response.ok) {\n          const data = await response.json();\n          const commentsWithUserId = data.map(comment => ({\n            ...comment,\n            currentUserId: currentUser.id\n          }));\n          setComments(commentsWithUserId);\n        } else {\n          console.error(\"Ошибка при загрузке комментариев:\", response.statusText);\n        }\n      } catch (error) {\n        console.error(\"Ошибка при загрузке комментариев:\", error);\n      }\n    };\n    fetchComments();\n  }, [postId, currentUser.id]);\n  const handleAddComment = async () => {\n    if (!newComment.trim()) return;\n    try {\n      console.log(`Добавляем новый комментарий: ${newComment}`);\n      const response = await fetch(`http://localhost:8080/api/comments`, {\n        method: \"POST\",\n        headers: {\n          \"Content-Type\": \"application/json\"\n        },\n        body: JSON.stringify({\n          content: newComment,\n          postId,\n          userId: currentUser.id\n        })\n      });\n      if (response.ok) {\n        const addedComment = await response.json();\n        console.log(\"Добавлен новый комментарий:\", addedComment);\n        setComments(prevComments => [...prevComments, {\n          ...addedComment,\n          currentUserId: currentUser.id\n        }]);\n        setNewComment(\"\");\n        setIsCommenting(false);\n      } else {\n        console.error(\"Ошибка при добавлении комментария:\", response.statusText);\n      }\n    } catch (error) {\n      console.error(\"Ошибка при добавлении комментария:\", error);\n    }\n  };\n\n  // Функция для редактирования комментария\n  const handleEditComment = async (commentId, updatedContent) => {\n    console.log(`Редактируем комментарий ID: ${commentId}, новый контент: ${updatedContent}`);\n    try {\n      const response = await fetch(`http://localhost:8080/api/comments/${commentId}`, {\n        method: \"PUT\",\n        headers: {\n          \"Content-Type\": \"application/json\"\n        },\n        body: JSON.stringify({\n          content: updatedContent\n        })\n      });\n      if (response.ok) {\n        const updatedComment = await response.json();\n        console.log(\"Комментарий обновлен:\", updatedComment);\n        setComments(prevComments => prevComments.map(comment => comment.commentId === commentId ? updatedComment : comment));\n      } else {\n        console.error(\"Ошибка при редактировании комментария:\", response.statusText);\n      }\n    } catch (error) {\n      console.error(\"Ошибка при редактировании комментария:\", error);\n    }\n  };\n\n  // Функция для удаления комментария\n  const handleDeleteComment = async commentId => {\n    console.log(`Удаляем комментарий ID: ${commentId}`);\n    try {\n      const response = await fetch(`http://localhost:8080/api/comments/${commentId}`, {\n        method: \"DELETE\"\n      });\n      if (response.ok) {\n        setComments(prevComments => prevComments.filter(comment => comment.commentId !== commentId));\n        console.log(`Комментарий с ID: ${commentId} удален`);\n      } else {\n        console.error(\"Ошибка при удалении комментария:\", response.statusText);\n      }\n    } catch (error) {\n      console.error(\"Ошибка при удалении комментария:\", error);\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"comments-section\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"post-actions\",\n      children: /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: () => setIsCommenting(!isCommenting),\n        children: \"\\u0414\\u043E\\u0431\\u0430\\u0432\\u0438\\u0442\\u044C \\u043A\\u043E\\u043C\\u043C\\u0435\\u043D\\u0442\\u0430\\u0440\\u0438\\u0439\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 128,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 127,\n      columnNumber: 7\n    }, this), isCommenting && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"add-comment\",\n      children: [/*#__PURE__*/_jsxDEV(\"textarea\", {\n        value: newComment,\n        onChange: e => setNewComment(e.target.value),\n        placeholder: \"\\u041D\\u0430\\u043F\\u0438\\u0448\\u0438\\u0442\\u0435 \\u043A\\u043E\\u043C\\u043C\\u0435\\u043D\\u0442\\u0430\\u0440\\u0438\\u0439...\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 134,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: handleAddComment,\n        children: \"\\u041E\\u0442\\u043F\\u0440\\u0430\\u0432\\u0438\\u0442\\u044C\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 139,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 133,\n      columnNumber: 9\n    }, this), comments.length > 0 ? comments.map(comment => /*#__PURE__*/_jsxDEV(Comment, {\n      comment: comment,\n      currentUser: currentUser,\n      handleEditComment: handleEditComment,\n      handleDeleteComment: handleDeleteComment\n    }, comment.commentId, false, {\n      fileName: _jsxFileName,\n      lineNumber: 146,\n      columnNumber: 11\n    }, this)) : /*#__PURE__*/_jsxDEV(\"p\", {\n      children: \"\\u041A\\u043E\\u043C\\u043C\\u0435\\u043D\\u0442\\u0430\\u0440\\u0438\\u0435\\u0432 \\u043D\\u0435\\u0442.\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 155,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 126,\n    columnNumber: 5\n  }, this);\n};\n_s(Comments, \"neg277AorAv9N4oML8iKd7WAM7o=\", false, function () {\n  return [useSelector];\n});\n_c = Comments;\nexport default Comments;\nvar _c;\n$RefreshReg$(_c, \"Comments\");","map":{"version":3,"names":["React","useState","useEffect","useSelector","Comment","jsxDEV","_jsxDEV","Comments","postId","_s","currentUser","state","auth","user","newComment","setNewComment","comments","setComments","isCommenting","setIsCommenting","fetchComments","response","fetch","ok","data","json","commentsWithUserId","map","comment","currentUserId","id","console","error","statusText","handleAddComment","trim","log","method","headers","body","JSON","stringify","content","userId","addedComment","prevComments","handleEditComment","commentId","updatedContent","updatedComment","handleDeleteComment","filter","className","children","onClick","fileName","_jsxFileName","lineNumber","columnNumber","value","onChange","e","target","placeholder","length","_c","$RefreshReg$"],"sources":["/Users/nurbol/Documents/nodes.frontend/src/Components/Comments.jsx"],"sourcesContent":["import React, { useState, useEffect } from \"react\";\nimport { useSelector } from \"react-redux\";\nimport Comment from \"./Comment\"; \nimport \"../Styles/Comments.css\"; \n\nconst Comments = ({ postId }) => {\n  const currentUser = useSelector((state) => state.auth.user); \n  const [newComment, setNewComment] = useState(\"\"); \n  const [comments, setComments] = useState([]); \n  const [isCommenting, setIsCommenting] = useState(false); \n\n  \n  useEffect(() => {\n    const fetchComments = async () => {\n      try {\n        const response = await fetch(`http://localhost:8080/api/comments/post/${postId}`);\n        if (response.ok) {\n          const data = await response.json();\n  \n          \n          const commentsWithUserId = data.map(comment => ({\n            ...comment,\n            currentUserId: currentUser.id, \n          }));\n  \n          setComments(commentsWithUserId);\n        } else {\n          console.error(\"Ошибка при загрузке комментариев:\", response.statusText);\n        }\n      } catch (error) {\n        console.error(\"Ошибка при загрузке комментариев:\", error);\n      }\n    };\n  \n    fetchComments();\n  }, [postId, currentUser.id]);\n   \n\n  \n  const handleAddComment = async () => {\n    if (!newComment.trim()) return; \n\n    try {\n      console.log(`Добавляем новый комментарий: ${newComment}`);\n      const response = await fetch(`http://localhost:8080/api/comments`, {\n        method: \"POST\",\n        headers: {\n          \"Content-Type\": \"application/json\",\n        },\n        body: JSON.stringify({\n          content: newComment, \n          postId, \n          userId: currentUser.id, \n        }),\n      });\n\n      if (response.ok) {\n        const addedComment = await response.json(); \n        console.log(\"Добавлен новый комментарий:\", addedComment);\n        setComments((prevComments) => [\n          ...prevComments,\n          { ...addedComment, currentUserId: currentUser.id }, \n        ]);\n        setNewComment(\"\"); \n        setIsCommenting(false); \n      } else {\n        console.error(\"Ошибка при добавлении комментария:\", response.statusText);\n      }\n    } catch (error) {\n      console.error(\"Ошибка при добавлении комментария:\", error);\n    }\n  };\n\n  // Функция для редактирования комментария\n  const handleEditComment = async (commentId, updatedContent) => {\n    console.log(`Редактируем комментарий ID: ${commentId}, новый контент: ${updatedContent}`);\n    try {\n      const response = await fetch(`http://localhost:8080/api/comments/${commentId}`, {\n        method: \"PUT\",\n        headers: {\n          \"Content-Type\": \"application/json\",\n        },\n        body: JSON.stringify({\n          content: updatedContent, \n        }),\n      });\n\n      if (response.ok) {\n        const updatedComment = await response.json();\n        console.log(\"Комментарий обновлен:\", updatedComment);\n        setComments((prevComments) =>\n          prevComments.map((comment) =>\n            comment.commentId === commentId ? updatedComment : comment\n          )\n        );\n      } else {\n        console.error(\"Ошибка при редактировании комментария:\", response.statusText);\n      }\n    } catch (error) {\n      console.error(\"Ошибка при редактировании комментария:\", error);\n    }\n  };\n\n  // Функция для удаления комментария\n  const handleDeleteComment = async (commentId) => {\n    console.log(`Удаляем комментарий ID: ${commentId}`);\n    try {\n      const response = await fetch(`http://localhost:8080/api/comments/${commentId}`, {\n        method: \"DELETE\",\n      });\n\n      if (response.ok) {\n        setComments((prevComments) =>\n          prevComments.filter((comment) => comment.commentId !== commentId)\n        );\n        console.log(`Комментарий с ID: ${commentId} удален`);\n      } else {\n        console.error(\"Ошибка при удалении комментария:\", response.statusText);\n      }\n    } catch (error) {\n      console.error(\"Ошибка при удалении комментария:\", error);\n    }\n  };\n\n  return (\n    <div className=\"comments-section\">\n      <div className=\"post-actions\">\n        <button onClick={() => setIsCommenting(!isCommenting)}>Добавить комментарий</button>\n      </div>\n\n      {/* Форма добавления комментариев */}\n      {isCommenting && (\n        <div className=\"add-comment\">\n          <textarea\n            value={newComment}\n            onChange={(e) => setNewComment(e.target.value)} \n            placeholder=\"Напишите комментарий...\"\n          />\n          <button onClick={handleAddComment}>Отправить</button>\n        </div>\n      )}\n\n      {/* Отображение комментариев с использованием компонента Comment */}\n      {comments.length > 0 ? (\n        comments.map((comment) => (\n          <Comment\n            key={comment.commentId}\n            comment={comment}\n            currentUser={currentUser}\n            handleEditComment={handleEditComment}\n            handleDeleteComment={handleDeleteComment}\n          />\n        ))\n      ) : (\n        <p>Комментариев нет.</p>\n      )}\n    </div>\n  );\n};\n\nexport default Comments;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}