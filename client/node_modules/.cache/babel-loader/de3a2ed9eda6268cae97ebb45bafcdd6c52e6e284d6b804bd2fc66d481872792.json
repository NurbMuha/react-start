{"ast":null,"code":"var _jsxFileName = \"/Users/nurbol/Documents/react-start/client/src/Pages/Chats.jsx\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport { useSelector } from 'react-redux';\nimport { useNavigate } from 'react-router-dom';\nimport TabBar from '../Components/TabBar';\nimport '../Styles/Chats.css';\nimport { jsxDEV as _jsxDEV, Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nfunction Chats() {\n  _s();\n  const user = useSelector(state => state.auth.user);\n  const navigate = useNavigate();\n  const [conversations, setConversations] = useState([]);\n  const [messages, setMessages] = useState([]);\n  const [selectedConversation, setSelectedConversation] = useState(null);\n  const [newMessage, setNewMessage] = useState('');\n  useEffect(() => {\n    if (!user) {\n      navigate('/login'); // Redirect to login if user is not logged in\n      return;\n    }\n    const fetchConversations = async () => {\n      try {\n        const response = await fetch(`http://localhost:3001/conversations/${user.id}`);\n        const data = await response.json();\n        setConversations(data);\n      } catch (error) {\n        console.error('Error fetching conversations:', error);\n      }\n    };\n    fetchConversations();\n    return () => {\n      // Cleanup logic (if needed)\n      setConversations([]);\n      setMessages([]);\n    };\n  }, [user, navigate]);\n  const handleSelectConversation = conversation => {\n    setSelectedConversation(conversation);\n    fetchMessages(conversation.id);\n  };\n  const fetchMessages = async conversationId => {\n    try {\n      const response = await fetch(`http://localhost:3001/messages/${conversationId}`);\n      const data = await response.json();\n      setMessages(data);\n    } catch (error) {\n      console.error('Error fetching messages:', error);\n    }\n  };\n  const handleSendMessage = async () => {\n    if (!newMessage.trim()) return;\n    const message = {\n      conversation_id: selectedConversation.id,\n      sender_id: user.id,\n      content: newMessage\n    };\n    try {\n      const response = await fetch('http://localhost:3001/messages', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify(message)\n      });\n      if (response.ok) {\n        const savedMessage = await response.json();\n        setMessages(prevMessages => [...prevMessages, savedMessage]);\n        setNewMessage('');\n      }\n    } catch (error) {\n      console.error('Error sending message:', error);\n    }\n  };\n  if (!user) {\n    return null; // Prevent rendering if user is not available\n  }\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"background-container\",\n    children: [/*#__PURE__*/_jsxDEV(TabBar, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 89,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"chats-container\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"conversations-list\",\n        children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n          children: \"Chats\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 92,\n          columnNumber: 21\n        }, this), conversations.map(conversation => /*#__PURE__*/_jsxDEV(\"div\", {\n          className: `conversation-item ${(selectedConversation === null || selectedConversation === void 0 ? void 0 : selectedConversation.id) === conversation.id ? 'active' : ''}`,\n          onClick: () => handleSelectConversation(conversation),\n          children: conversation.participantNames.filter(name => name !== user.username).map(name => /*#__PURE__*/_jsxDEV(\"span\", {\n            children: name\n          }, name, false, {\n            fileName: _jsxFileName,\n            lineNumber: 104,\n            columnNumber: 37\n          }, this))\n        }, conversation.id, false, {\n          fileName: _jsxFileName,\n          lineNumber: 94,\n          columnNumber: 25\n        }, this))]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 91,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"chat-window\",\n        children: selectedConversation ? /*#__PURE__*/_jsxDEV(_Fragment, {\n          children: [/*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"messages-list\",\n            children: messages.map(message => /*#__PURE__*/_jsxDEV(\"div\", {\n              className: `message-item ${message.sender_id === user.id ? 'sent' : 'received'}`,\n              children: message.content\n            }, message.id, false, {\n              fileName: _jsxFileName,\n              lineNumber: 114,\n              columnNumber: 37\n            }, this))\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 112,\n            columnNumber: 29\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"message-input\",\n            children: [/*#__PURE__*/_jsxDEV(\"input\", {\n              type: \"text\",\n              placeholder: \"Type a message...\",\n              value: newMessage,\n              onChange: e => setNewMessage(e.target.value)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 125,\n              columnNumber: 33\n            }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n              onClick: handleSendMessage,\n              children: \"Send\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 131,\n              columnNumber: 33\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 124,\n            columnNumber: 29\n          }, this)]\n        }, void 0, true) : /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"no-conversation-selected\",\n          children: /*#__PURE__*/_jsxDEV(\"p\", {\n            children: \"Select a conversation to start chatting\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 136,\n            columnNumber: 29\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 135,\n          columnNumber: 25\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 109,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 90,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 88,\n    columnNumber: 9\n  }, this);\n}\n_s(Chats, \"H9vD5BA/ZxGtoEkJTR0JPwaDYVs=\", false, function () {\n  return [useSelector, useNavigate];\n});\n_c = Chats;\nexport default Chats;\nvar _c;\n$RefreshReg$(_c, \"Chats\");","map":{"version":3,"names":["React","useState","useEffect","useSelector","useNavigate","TabBar","jsxDEV","_jsxDEV","Fragment","_Fragment","Chats","_s","user","state","auth","navigate","conversations","setConversations","messages","setMessages","selectedConversation","setSelectedConversation","newMessage","setNewMessage","fetchConversations","response","fetch","id","data","json","error","console","handleSelectConversation","conversation","fetchMessages","conversationId","handleSendMessage","trim","message","conversation_id","sender_id","content","method","headers","body","JSON","stringify","ok","savedMessage","prevMessages","className","children","fileName","_jsxFileName","lineNumber","columnNumber","map","onClick","participantNames","filter","name","username","type","placeholder","value","onChange","e","target","_c","$RefreshReg$"],"sources":["/Users/nurbol/Documents/react-start/client/src/Pages/Chats.jsx"],"sourcesContent":["import React, { useState, useEffect } from 'react';\nimport { useSelector } from 'react-redux';\nimport { useNavigate } from 'react-router-dom';\nimport TabBar from '../Components/TabBar';\nimport '../Styles/Chats.css';\n\nfunction Chats() {\n    const user = useSelector((state) => state.auth.user);\n    const navigate = useNavigate();\n    const [conversations, setConversations] = useState([]);\n    const [messages, setMessages] = useState([]);\n    const [selectedConversation, setSelectedConversation] = useState(null);\n    const [newMessage, setNewMessage] = useState('');\n\n    useEffect(() => {\n        if (!user) {\n            navigate('/login'); // Redirect to login if user is not logged in\n            return;\n        }\n\n        const fetchConversations = async () => {\n            try {\n                const response = await fetch(`http://localhost:3001/conversations/${user.id}`);\n                const data = await response.json();\n                setConversations(data);\n            } catch (error) {\n                console.error('Error fetching conversations:', error);\n            }\n        };\n\n        fetchConversations();\n\n        return () => {\n            // Cleanup logic (if needed)\n            setConversations([]);\n            setMessages([]);\n        };\n    }, [user, navigate]);\n\n    const handleSelectConversation = (conversation) => {\n        setSelectedConversation(conversation);\n        fetchMessages(conversation.id);\n    };\n\n    const fetchMessages = async (conversationId) => {\n        try {\n            const response = await fetch(`http://localhost:3001/messages/${conversationId}`);\n            const data = await response.json();\n            setMessages(data);\n        } catch (error) {\n            console.error('Error fetching messages:', error);\n        }\n    };\n\n    const handleSendMessage = async () => {\n        if (!newMessage.trim()) return;\n\n        const message = {\n            conversation_id: selectedConversation.id,\n            sender_id: user.id,\n            content: newMessage,\n        };\n\n        try {\n            const response = await fetch('http://localhost:3001/messages', {\n                method: 'POST',\n                headers: {\n                    'Content-Type': 'application/json',\n                },\n                body: JSON.stringify(message),\n            });\n\n            if (response.ok) {\n                const savedMessage = await response.json();\n                setMessages((prevMessages) => [...prevMessages, savedMessage]);\n                setNewMessage('');\n            }\n        } catch (error) {\n            console.error('Error sending message:', error);\n        }\n    };\n\n    if (!user) {\n        return null; // Prevent rendering if user is not available\n    }\n\n    return (\n        <div className=\"background-container\">\n            <TabBar />\n            <div className=\"chats-container\">\n                <div className=\"conversations-list\">\n                    <h2>Chats</h2>\n                    {conversations.map((conversation) => (\n                        <div\n                            key={conversation.id}\n                            className={`conversation-item ${\n                                selectedConversation?.id === conversation.id ? 'active' : ''\n                            }`}\n                            onClick={() => handleSelectConversation(conversation)}\n                        >\n                            {conversation.participantNames\n                                .filter((name) => name !== user.username)\n                                .map((name) => (\n                                    <span key={name}>{name}</span>\n                                ))}\n                        </div>\n                    ))}\n                </div>\n                <div className=\"chat-window\">\n                    {selectedConversation ? (\n                        <>\n                            <div className=\"messages-list\">\n                                {messages.map((message) => (\n                                    <div\n                                        key={message.id}\n                                        className={`message-item ${\n                                            message.sender_id === user.id ? 'sent' : 'received'\n                                        }`}\n                                    >\n                                        {message.content}\n                                    </div>\n                                ))}\n                            </div>\n                            <div className=\"message-input\">\n                                <input\n                                    type=\"text\"\n                                    placeholder=\"Type a message...\"\n                                    value={newMessage}\n                                    onChange={(e) => setNewMessage(e.target.value)}\n                                />\n                                <button onClick={handleSendMessage}>Send</button>\n                            </div>\n                        </>\n                    ) : (\n                        <div className=\"no-conversation-selected\">\n                            <p>Select a conversation to start chatting</p>\n                        </div>\n                    )}\n                </div>\n            </div>\n        </div>\n    );\n}\n\nexport default Chats;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}