{"ast":null,"code":"var _jsxFileName = \"/Users/nurbol/Documents/react-start/client/src/Pages/Home.jsx\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport PostCard from '../Components/PostCard';\nimport TabBar from '../Components/TabBar';\nimport \"../Styles/Home.css\";\nimport { useSelector } from \"react-redux\";\nimport { useNavigate } from 'react-router-dom';\nimport { toast } from \"react-toastify\";\nimport \"react-toastify/dist/ReactToastify.css\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default function Home() {\n  _s();\n  const [posts, setPosts] = useState([]);\n  const [users, setUsers] = useState([]);\n  const [likes, setLikes] = useState([]);\n  const [editedContent, setEditedContent] = useState({});\n  const user = useSelector(state => state.auth.user);\n  const navigate = useNavigate();\n  useEffect(() => {\n    if (!user) {\n      toast.warn('You must be logged in to view posts');\n      navigate('/login');\n      return;\n    }\n    const fetchPosts = async () => {\n      try {\n        const postsResponse = await fetch(\"http://localhost:3001/posts\");\n        if (!postsResponse.ok) throw new Error(\"Failed to fetch posts\");\n        const postsData = await postsResponse.json();\n        setPosts(postsData);\n      } catch (error) {\n        console.error(\"Error fetching posts:\", error);\n        toast.error(\"Failed to fetch posts\");\n      }\n    };\n    const fetchUsers = async () => {\n      try {\n        const usersResponse = await fetch(\"http://localhost:3001/users\");\n        if (!usersResponse.ok) throw new Error(\"Failed to fetch users\");\n        const usersData = await usersResponse.json();\n        setUsers(usersData);\n      } catch (error) {\n        console.error(\"Error fetching users:\", error);\n        toast.error(\"Failed to fetch users\");\n      }\n    };\n    const fetchLikes = async () => {\n      try {\n        const likesResponse = await fetch(\"http://localhost:3001/likes\");\n        if (!likesResponse.ok) throw new Error(\"Failed to fetch likes\");\n        const likesData = await likesResponse.json();\n        setLikes(likesData);\n      } catch (error) {\n        console.error(\"Error fetching likes:\", error);\n        toast.error(\"Failed to fetch likes\");\n      }\n    };\n    fetchPosts();\n    fetchUsers();\n    fetchLikes();\n  }, [user, navigate]);\n  const handleLikePost = async postId => {\n    if (!user || !user.id) {\n      toast.warn(\"You must be logged in to like a post\");\n      return;\n    }\n    const existingLike = likes.find(like => like.userId === user.id && like.post_id === postId);\n    if (existingLike) {\n      try {\n        const response = await fetch(`http://localhost:3001/likes/${existingLike.id}`, {\n          method: 'DELETE',\n          headers: {\n            'Content-Type': 'application/json'\n          }\n        });\n        if (!response.ok) throw new Error(`Failed to delete like for post ${postId}`);\n        setLikes(likes.filter(like => like.id !== existingLike.id));\n        toast.success(\"Like removed successfully!\");\n      } catch (error) {\n        console.error(\"Error deleting like:\", error);\n        toast.error(\"Failed to remove like\");\n      }\n    } else {\n      const newLike = {\n        userId: user.id,\n        post_id: postId\n      };\n      try {\n        const response = await fetch('http://localhost:3001/likes', {\n          method: 'POST',\n          headers: {\n            'Content-Type': 'application/json'\n          },\n          body: JSON.stringify(newLike)\n        });\n        if (!response.ok) throw new Error(\"Failed to add like\");\n        const savedLike = await response.json();\n        setLikes([...likes, savedLike]);\n        toast.success(\"Post liked successfully!\");\n      } catch (error) {\n        console.error(\"Error adding like:\", error);\n        toast.error(\"Failed to like post\");\n      }\n    }\n  };\n  const handleDeletePost = async postId => {\n    try {\n      const response = await fetch(`http://localhost:3001/posts/${postId}`, {\n        method: 'DELETE',\n        headers: {\n          'Content-Type': 'application/json'\n        }\n      });\n      if (!response.ok) throw new Error(`Failed to delete post ${postId}`);\n      setPosts(posts.filter(post => post.id !== postId));\n      toast.success(\"Post deleted successfully!\");\n    } catch (error) {\n      console.error(\"Error deleting post:\", error);\n      toast.error(\"Failed to delete post\");\n    }\n  };\n  const getLikeCount = postId => {\n    return likes.filter(like => like.post_id === postId).length;\n  };\n  const formatDate = isoDate => {\n    const date = new Date(isoDate);\n    return date.toLocaleString('en-US', {\n      year: 'numeric',\n      month: 'long',\n      day: 'numeric',\n      hour: '2-digit',\n      minute: '2-digit',\n      hour12: false\n    }).replace(/,/, '');\n  };\n  const handleEditPost = async postId => {\n    const content = editedContent[postId];\n    if (!content) {\n      toast.warn('Please enter content to update');\n      return;\n    }\n    if (user.role === 'ban') {\n      toast.error('You are banned and cannot edit posts');\n      return;\n    }\n    const post = posts.find(p => p.id === postId);\n    if (!post) {\n      toast.error('Post not found');\n      return;\n    }\n    if (user.id !== post.userId && user.role !== 'admin' && user.role !== 'moderator') {\n      toast.error('You can only edit your own posts or as an admin/moderator');\n      return;\n    }\n    try {\n      const response = await fetch(`http://localhost:3001/posts/${postId}`, {\n        method: 'PATCH',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify({\n          content\n        })\n      });\n      if (!response.ok) throw new Error('Failed to update post');\n      const updatedPost = await response.json();\n      setPosts(prevPosts => prevPosts.map(p => p.id === updatedPost.id ? updatedPost : p));\n      setEditedContent(prev => ({\n        ...prev,\n        [postId]: ''\n      })); // Clear input\n      toast.success('Post updated successfully!');\n    } catch (error) {\n      console.error(`Error updating post with ID: ${postId}`, error);\n      toast.error('Failed to update post');\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"background-container\",\n    children: [/*#__PURE__*/_jsxDEV(TabBar, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 196,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"posts-container\",\n      children: posts.map(post => {\n        const matchedUser = users.find(user => user.id === post.userId);\n        const likeCount = getLikeCount(post.id);\n        const formattedDate = formatDate(post.created_at);\n        const currentContent = editedContent[post.id] || '';\n\n        // Determine if the current user can edit/delete this post\n        const canEditOrDelete = user && (user.role === 'admin' || user.id === post.userId);\n        return /*#__PURE__*/_jsxDEV(\"div\", {\n          children: /*#__PURE__*/_jsxDEV(PostCard, {\n            post: post,\n            author: matchedUser ? matchedUser.username : \"Unknown\",\n            date: formattedDate,\n            onDelete: canEditOrDelete ? () => handleDeletePost(post.id) : undefined,\n            onEdit: canEditOrDelete ? () => {} : undefined // Placeholder, will be handled in PostCard\n            ,\n            onLike: () => handleLikePost(post.id),\n            likes: likes,\n            user: user,\n            editedContent: currentContent,\n            setEditedContent: setEditedContent,\n            handleEditPost: canEditOrDelete ? () => handleEditPost(post.id) : undefined,\n            canEditOrDelete: canEditOrDelete\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 211,\n            columnNumber: 15\n          }, this)\n        }, post.id, false, {\n          fileName: _jsxFileName,\n          lineNumber: 210,\n          columnNumber: 13\n        }, this);\n      })\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 197,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 195,\n    columnNumber: 5\n  }, this);\n}\n_s(Home, \"cbaVoqSBdrhkixqCMro1DNc0ghg=\", false, function () {\n  return [useSelector, useNavigate];\n});\n_c = Home;\nvar _c;\n$RefreshReg$(_c, \"Home\");","map":{"version":3,"names":["React","useState","useEffect","PostCard","TabBar","useSelector","useNavigate","toast","jsxDEV","_jsxDEV","Home","_s","posts","setPosts","users","setUsers","likes","setLikes","editedContent","setEditedContent","user","state","auth","navigate","warn","fetchPosts","postsResponse","fetch","ok","Error","postsData","json","error","console","fetchUsers","usersResponse","usersData","fetchLikes","likesResponse","likesData","handleLikePost","postId","id","existingLike","find","like","userId","post_id","response","method","headers","filter","success","newLike","body","JSON","stringify","savedLike","handleDeletePost","post","getLikeCount","length","formatDate","isoDate","date","Date","toLocaleString","year","month","day","hour","minute","hour12","replace","handleEditPost","content","role","p","updatedPost","prevPosts","map","prev","className","children","fileName","_jsxFileName","lineNumber","columnNumber","matchedUser","likeCount","formattedDate","created_at","currentContent","canEditOrDelete","author","username","onDelete","undefined","onEdit","onLike","_c","$RefreshReg$"],"sources":["/Users/nurbol/Documents/react-start/client/src/Pages/Home.jsx"],"sourcesContent":["import React, { useState, useEffect } from 'react';\nimport PostCard from '../Components/PostCard';\nimport TabBar from '../Components/TabBar';\nimport \"../Styles/Home.css\";\nimport { useSelector } from \"react-redux\";\nimport { useNavigate } from 'react-router-dom';\nimport { toast } from \"react-toastify\";\nimport \"react-toastify/dist/ReactToastify.css\";\n\nexport default function Home() {\n  const [posts, setPosts] = useState([]);\n  const [users, setUsers] = useState([]);\n  const [likes, setLikes] = useState([]);\n  const [editedContent, setEditedContent] = useState({});\n  const user = useSelector((state) => state.auth.user);\n  const navigate = useNavigate();\n\n  useEffect(() => {\n    if (!user) {\n      toast.warn('You must be logged in to view posts');\n      navigate('/login');\n      return;\n    }\n\n    const fetchPosts = async () => {\n      try {\n        const postsResponse = await fetch(\"http://localhost:3001/posts\");\n        if (!postsResponse.ok) throw new Error(\"Failed to fetch posts\");\n        const postsData = await postsResponse.json();\n        setPosts(postsData);\n      } catch (error) {\n        console.error(\"Error fetching posts:\", error);\n        toast.error(\"Failed to fetch posts\");\n      }\n    };\n\n    const fetchUsers = async () => {\n      try {\n        const usersResponse = await fetch(\"http://localhost:3001/users\");\n        if (!usersResponse.ok) throw new Error(\"Failed to fetch users\");\n        const usersData = await usersResponse.json();\n        setUsers(usersData);\n      } catch (error) {\n        console.error(\"Error fetching users:\", error);\n        toast.error(\"Failed to fetch users\");\n      }\n    };\n\n    const fetchLikes = async () => {\n      try {\n        const likesResponse = await fetch(\"http://localhost:3001/likes\");\n        if (!likesResponse.ok) throw new Error(\"Failed to fetch likes\");\n        const likesData = await likesResponse.json();\n        setLikes(likesData);\n      } catch (error) {\n        console.error(\"Error fetching likes:\", error);\n        toast.error(\"Failed to fetch likes\");\n      }\n    };\n\n    fetchPosts();\n    fetchUsers();\n    fetchLikes();\n  }, [user, navigate]);\n\n  const handleLikePost = async (postId) => {\n    if (!user || !user.id) {\n      toast.warn(\"You must be logged in to like a post\");\n      return;\n    }\n\n    const existingLike = likes.find(like => like.userId === user.id && like.post_id === postId);\n\n    if (existingLike) {\n      try {\n        const response = await fetch(`http://localhost:3001/likes/${existingLike.id}`, {\n          method: 'DELETE',\n          headers: {\n            'Content-Type': 'application/json',\n          },\n        });\n        if (!response.ok) throw new Error(`Failed to delete like for post ${postId}`);\n        setLikes(likes.filter(like => like.id !== existingLike.id));\n        toast.success(\"Like removed successfully!\");\n      } catch (error) {\n        console.error(\"Error deleting like:\", error);\n        toast.error(\"Failed to remove like\");\n      }\n    } else {\n      const newLike = {\n        userId: user.id,\n        post_id: postId,\n      };\n\n      try {\n        const response = await fetch('http://localhost:3001/likes', {\n          method: 'POST',\n          headers: {\n            'Content-Type': 'application/json',\n          },\n          body: JSON.stringify(newLike),\n        });\n\n        if (!response.ok) throw new Error(\"Failed to add like\");\n        const savedLike = await response.json();\n        setLikes([...likes, savedLike]);\n        toast.success(\"Post liked successfully!\");\n      } catch (error) {\n        console.error(\"Error adding like:\", error);\n        toast.error(\"Failed to like post\");\n      }\n    }\n  };\n\n  const handleDeletePost = async (postId) => {\n    try {\n      const response = await fetch(`http://localhost:3001/posts/${postId}`, {\n        method: 'DELETE',\n        headers: {\n          'Content-Type': 'application/json',\n        },\n      });\n\n      if (!response.ok) throw new Error(`Failed to delete post ${postId}`);\n      setPosts(posts.filter(post => post.id !== postId));\n      toast.success(\"Post deleted successfully!\");\n    } catch (error) {\n      console.error(\"Error deleting post:\", error);\n      toast.error(\"Failed to delete post\");\n    }\n  };\n\n  const getLikeCount = (postId) => {\n    return likes.filter(like => like.post_id === postId).length;\n  };\n\n  const formatDate = (isoDate) => {\n    const date = new Date(isoDate);\n    return date.toLocaleString('en-US', {\n      year: 'numeric',\n      month: 'long',\n      day: 'numeric',\n      hour: '2-digit',\n      minute: '2-digit',\n      hour12: false,\n    }).replace(/,/, '');\n  };\n\n  const handleEditPost = async (postId) => {\n    const content = editedContent[postId];\n    if (!content) {\n      toast.warn('Please enter content to update');\n      return;\n    }\n\n    if (user.role === 'ban') {\n      toast.error('You are banned and cannot edit posts');\n      return;\n    }\n\n    const post = posts.find((p) => p.id === postId);\n    if (!post) {\n      toast.error('Post not found');\n      return;\n    }\n\n    if (user.id !== post.userId && user.role !== 'admin' && user.role !== 'moderator') {\n      toast.error('You can only edit your own posts or as an admin/moderator');\n      return;\n    }\n\n    try {\n      const response = await fetch(`http://localhost:3001/posts/${postId}`, {\n        method: 'PATCH',\n        headers: {\n          'Content-Type': 'application/json',\n        },\n        body: JSON.stringify({ content }),\n      });\n\n      if (!response.ok) throw new Error('Failed to update post');\n      const updatedPost = await response.json();\n      setPosts((prevPosts) =>\n        prevPosts.map((p) => (p.id === updatedPost.id ? updatedPost : p))\n      );\n      setEditedContent((prev) => ({ ...prev, [postId]: '' })); // Clear input\n      toast.success('Post updated successfully!');\n    } catch (error) {\n      console.error(`Error updating post with ID: ${postId}`, error);\n      toast.error('Failed to update post');\n    }\n  };\n\n  return (\n    <div className=\"background-container\">\n      <TabBar />\n      <div className=\"posts-container\">\n        {posts.map(post => {\n          const matchedUser = users.find(user => user.id === post.userId);\n          const likeCount = getLikeCount(post.id);\n          const formattedDate = formatDate(post.created_at);\n          const currentContent = editedContent[post.id] || '';\n\n            // Determine if the current user can edit/delete this post\n            const canEditOrDelete =\n            user &&\n            (user.role === 'admin' || user.id === post.userId);\n\n            return (\n            <div key={post.id}>\n              <PostCard\n              post={post}\n              author={matchedUser ? matchedUser.username : \"Unknown\"}\n              date={formattedDate}\n              onDelete={canEditOrDelete ? () => handleDeletePost(post.id) : undefined}\n              onEdit={canEditOrDelete ? () => {} : undefined} // Placeholder, will be handled in PostCard\n              onLike={() => handleLikePost(post.id)}\n              likes={likes}\n              user={user}\n              editedContent={currentContent}\n              setEditedContent={setEditedContent}\n              handleEditPost={canEditOrDelete ? () => handleEditPost(post.id) : undefined}\n              canEditOrDelete={canEditOrDelete}\n              />\n            </div>\n            );\n        })}\n      </div>\n    </div>\n  );\n}"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}